<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Go 1.12发布说明</title>
      <link href="/go_1.12/"/>
      <url>/go_1.12/</url>
      
        <content type="html"><![CDATA[<h2 id="introduction">Introduction to Go 1.12</h2><p>  The latest Go release, version 1.12, arrives six months after <a href="go1.11">Go 1.11</a>.  Most of its changes are in the implementation of the toolchain, runtime, and libraries.  As always, the release maintains the Go 1 <a href="/doc/go1compat">promise of compatibility</a>.  We expect almost all Go programs to continue to compile and run as before.</p><h2 id="language">Changes to the language</h2><p>  There are no changes to the language specification.</p><h2 id="ports">Ports</h2><p><!-- CL 138675 -->  The race detector is now supported on <code>linux/arm64</code>.</p><p id="freebsd">  Go 1.12 is the last release that is supported on FreeBSD 10.x, which has  already reached end-of-life. Go 1.13 will require FreeBSD 11.2+ or FreeBSD  12.0+.  FreeBSD 12.0+ requires a kernel with the COMPAT_FREEBSD11 option set (this is the default).</p><p><!-- CL 146898 -->  cgo is now supported on <code>linux/ppc64</code>.</p><p id="hurd"><!-- CL 146023 -->  <code>hurd</code> is now a recognized value for <code>GOOS</code>, reserved  for the GNU/Hurd system for use with <code>gccgo</code>.</p><h3 id="windows">Windows</h3><p>  Go's new <code>windows/arm</code> port supports running Go on Windows 10  IoT Core on 32-bit ARM chips such as the Raspberry Pi 3.</p><h3 id="aix">AIX</h3><p>  Go now supports AIX 7.2 and later on POWER8 architectures (<code>aix/ppc64</code>). External linking, cgo, pprof and the race detector aren't yet supported.</p><h3 id="darwin">Darwin</h3><p>  Go 1.12 is the last release that will run on macOS 10.10 Yosemite.  Go 1.13 will require macOS 10.11 El Capitan or later.</p><p><!-- CL 141639 -->  <code>libSystem</code> is now used when making syscalls on Darwin,  ensuring forward-compatibility with future versions of macOS and iOS.  <!-- CL 153338 -->  The switch to <code>libSystem</code> triggered additional App Store  checks for private API usage. Since it is considered private,  <code>syscall.Getdirentries</code> now always fails with  <code>ENOSYS</code> on iOS.</p><h2 id="tools">Tools</h2><h3 id="vet"><code>go tool vet</code> no longer supported</h3><p>  The <code>go vet</code> command has been rewritten to serve as the  base for a range of different source code analysis tools. See  the <a href="https://godoc.org/golang.org/x/tools/go/analysis" target="_blank" rel="noopener">golang.org/x/tools/go/analysis</a>  package for details. A side-effect is that <code>go tool vet</code>  is no longer supported. External tools that use <code>go tool  vet</code> must be changed to use <code>go  vet</code>. Using <code>go vet</code> instead of <code>go tool  vet</code> should work with all supported versions of Go.</p><p>  As part of this change, the experimental <code>-shadow</code> option  is no longer available with <code>go vet</code>. Checking for  variable shadowing may now be done using<pre>go get -u golang.org/x/tools/go/analysis/passes/shadow/cmd/shadowgo vet -vettool=$(which shadow)</pre></p><h3 id="tour">Tour</h3><p> <!-- CL 152657 -->The Go tour is no longer included in the main binary distribution. Torun the tour locally, instead of running <code>go</code> <code>tool</code> <code>tour</code>,manually install it:<pre>go get -u golang.org/x/tourtour</pre></p><h3 id="gocache">Build cache requirement</h3><p>  The <a href="/cmd/go/#hdr-Build_and_test_caching">build cache</a> is now  required as a step toward eliminating  <code>$GOPATH/pkg</code>. Setting the environment variable  <code>GOCACHE=off</code> will cause <code>go</code> commands that write to the  cache to fail.</p><h3 id="binary-only">Binary-only packages</h3><p>  Go 1.12 is the last release that will support binary-only packages.</p><h3 id="cgo">Cgo</h3><p>    Go 1.12 will translate the C type <code>EGLDisplay</code> to the Go type <code>uintptr</code>.    This change is similar to how Go 1.10 and newer treats Darwin's CoreFoundation    and Java's JNI types. See the    <a href="/cmd/cgo/#hdr-Special_cases">cgo documentation</a>    for more information.</p><p><!-- CL 152657 -->  Mangled C names are no longer accepted in packages that use Cgo. Use the Cgo  names instead. For example, use the documented cgo name <code>C.char</code>  rather than the mangled name <code>_Ctype_char</code> that cgo generates.</p><h3 id="modules">Modules</h3><p><!-- CL 148517 -->  When <code>GO111MODULE</code> is set to <code>on</code>, the <code>go</code>  command now supports module-aware operations outside of a module directory,  provided that those operations do not need to resolve import paths relative to  the current directory or explicitly edit the <code>go.mod</code> file.  Commands such as <code>go</code> <code>get</code>,  <code>go</code> <code>list</code>, and  <code>go</code> <code>mod</code> <code>download</code> behave as if in a  module with initially-empty requirements.  In this mode, <code>go</code> <code>env</code> <code>GOMOD</code> reports  the system's null device (<code>/dev/null</code> or <code>NUL</code>).</p><p><!-- CL 146382 -->  <code>go</code> commands that download and extract modules are now safe to  invoke concurrently.  The module cache (<code>GOPATH/pkg/mod</code>) must reside in a filesystem that  supports file locking.</p><p><!-- CL 147282, 147281 -->  The <code>go</code> directive in a <code>go.mod</code> file now indicates the  version of the language used by the files within that module.  It will be set to the current release  (<code>go</code> <code>1.12</code>) if no existing version is  present.  If the <code>go</code> directive for a module specifies a  version <em>newer</em> than the toolchain in use, the <code>go</code> command  will attempt to build the packages regardless, and will note the mismatch only if  that build fails.</p><p><!-- CL 147282, 147281 -->  This changed use of the <code>go</code> directive means that if you  use Go 1.12 to build a module, thus recording <code>go 1.12</code>  in the <code>go.mod</code> file, you will get an error when  attempting to build the same module with Go 1.11 through Go 1.11.3.  Go 1.11.4 or later will work fine, as will releases older than Go 1.11.  If you must use Go 1.11 through 1.11.3, you can avoid the problem by  setting the language version to 1.11, using the Go 1.12 go tool,  via <code>go mod edit -go=1.11</code>.</p><p><!-- CL 152739 -->  When an import cannot be resolved using the active modules,  the <code>go</code> command will now try to use the modules mentioned in the  main module's <code>replace</code> directives before consulting the module  cache and the usual network sources.  If a matching replacement is found but the <code>replace</code> directive does  not specify a version, the <code>go</code> command uses a pseudo-version  derived from the zero <code>time.Time</code> (such  as <code>v0.0.0-00010101000000-000000000000</code>).</p><h3 id="compiler">Compiler toolchain</h3><p><!-- CL 134155, 134156 -->  The compiler's live variable analysis has improved. This may mean that  finalizers will be executed sooner in this release than in previous  releases. If that is a problem, consider the appropriate addition of a  <a href="/pkg/runtime/#KeepAlive"><code>runtime.KeepAlive</code></a> call.</p><p><!-- CL 147361 -->  More functions are now eligible for inlining by default, including  functions that do nothing but call another function.  This extra inlining makes it additionally important to use  <a href="/pkg/runtime/#CallersFrames"><code>runtime.CallersFrames</code></a>  instead of iterating over the result of  <a href="/pkg/runtime/#Callers"><code>runtime.Callers</code></a> directly.<pre>// Old code which no longer works correctly (it will miss inlined call frames).var pcs [10]uintptrn := runtime.Callers(1, pcs[:])for _, pc := range pcs[:n] {    f := runtime.FuncForPC(pc)    if f != nil {        fmt.Println(f.Name())    }}</pre><pre>// New code which will work correctly.var pcs [10]uintptrn := runtime.Callers(1, pcs[:])frames := runtime.CallersFrames(pcs[:n])for {    frame, more := frames.Next()    fmt.Println(frame.Function)    if !more {        break    }}</pre></p><p><!-- CL 153477 -->  Wrappers generated by the compiler to implement method expressions  are no longer reported  by <a href="/pkg/runtime/#CallersFrames"><code>runtime.CallersFrames</code></a>  and <a href="/pkg/runtime/#Stack"><code>runtime.Stack</code></a>. They  are also not printed in panic stack traces.</p><p>  This change aligns the <code>gc</code> toolchain to match<br>  the <code>gccgo</code> toolchain, which already elided such wrappers<br>  from stack traces.</p><p>  Clients of these APIs might need to adjust for the missing<br>  frames. For code that must interoperate between 1.11 and 1.12<br>  releases, you can replace the method expression <code>x.M</code><br>  with the function literal <code>func (...) { x.M(...) } </code>.</p><p></p><p><!-- CL 144340 -->  The compiler now accepts a <code>-lang</code> flag to set the Go language  version to use. For example, <code>-lang=go1.8</code> causes the compiler to  emit an error if the program uses type aliases, which were added in Go 1.9.  Language changes made before Go 1.12 are not consistently enforced.</p><p><!-- CL 147160 -->  The compiler toolchain now uses different conventions to call Go  functions and assembly functions. This should be invisible to users,  except for calls that simultaneously cross between Go and  assembly <em>and</em> cross a package boundary. If linking results  in an error like "relocation target not defined for ABIInternal (but  is defined for ABI0)", please refer to the  <a href="https://github.com/golang/proposal/blob/master/design/27539-internal-abi.md#compatibility" target="_blank" rel="noopener">compatibility section</a>  of the ABI design document.</p><p><!-- CL 145179 -->  There have been many improvements to the DWARF debug information  produced by the compiler, including improvements to argument  printing and variable location information.</p><p><!-- CL 61511 -->  Go programs now also maintain stack frame pointers on <code>linux/arm64</code>  for the benefit of profiling tools like <code>perf</code>. The frame pointer  maintenance has a small run-time overhead that varies but averages around 3%.  To build a toolchain that does not use frame pointers, set  <code>GOEXPERIMENT=noframepointer</code> when running <code>make.bash</code>.</p><p><!-- CL 142717 -->  The obsolete "safe" compiler mode (enabled by the <code>-u</code> gcflag) has been removed.</p><h3 id="godoc"><code>godoc</code> and <code>go</code> <code>doc</code></h3><p>  In Go 1.12, <code>godoc</code> no longer has a command-line interface and  is only a web server. Users should use <code>go</code> <code>doc</code>  for command-line help output instead. Go 1.12 is the last release that will  include the <code>godoc</code> webserver; in Go 1.13 it will be available  via <code>go</code> <code>get</code>.</p><p><!-- CL 141977 -->  <code>go</code> <code>doc</code> now supports the <code>-all</code> flag,  which will cause it to print all exported APIs and their documentation,  as the <code>godoc</code> command line used to do.</p><p><!-- CL 140959 -->  <code>go</code> <code>doc</code> also now includes the <code>-src</code> flag,  which will show the target's source code.</p><h3 id="trace">Trace</h3><p><!-- CL 60790 -->  The trace tool now supports plotting mutator utilization curves,  including cross-references to the execution trace. These are useful  for analyzing the impact of the garbage collector on application  latency and throughput.</p><h3 id="assembler">Assembler</h3><p><!-- CL 147218 -->  On <code>arm64</code>, the platform register was renamed from  <code>R18</code> to <code>R18_PLATFORM</code> to prevent accidental  use, as the OS could choose to reserve this register.</p><h2 id="runtime">Runtime</h2><p><!-- CL 138959 -->  Go 1.12 significantly improves the performance of sweeping when a  large fraction of the heap remains live. This reduces allocation  latency immediately following a garbage collection.</p><p><!-- CL 139719 -->  The Go runtime now releases memory back to the operating system more  aggressively, particularly in response to large allocations that  can't reuse existing heap space.</p><p><!-- CL 146342, CL 146340, CL 146345, CL 146339, CL 146343, CL 146337, CL 146341, CL 146338 -->  The Go runtime's timer and deadline code is faster and scales better  with higher numbers of CPUs. In particular, this improves the  performance of manipulating network connection deadlines.</p><p><!-- CL 135395 -->  On Linux, the runtime now uses <code>MADV_FREE</code> to release unused  memory. This is more efficient but may result in higher reported  RSS. The kernel will reclaim the unused data when it is needed.  To revert to the Go 1.11 behavior (<code>MADV_DONTNEED</code>), set the  environment variable <code>GODEBUG=madvdontneed=1</code>.</p><p><!-- CL 149578 -->  Adding cpu.<em>extension</em>=off to the  <a href="/doc/diagnostics.html#godebug">GODEBUG</a> environment  variable now disables the use of optional CPU instruction  set extensions in the standard library and runtime. This is not  yet supported on Windows.</p><p><!-- CL 158337 -->  Go 1.12 improves the accuracy of memory profiles by fixing  overcounting of large heap allocations.</p><p><!-- CL 159717 -->  Tracebacks, <code>runtime.Caller</code>,  and <code>runtime.Callers</code> no longer include  compiler-generated initialization functions.  Doing a traceback  during the initialization of a global variable will now show a  function named <code>PKG.init.ializers</code>.</p><h2 id="library">Core library</h2><h3 id="tls_1_3">TLS 1.3</h3><p>  Go 1.12 adds opt-in support for TLS 1.3 in the <code>crypto/tls</code> package as  specified by <a href="https://www.rfc-editor.org/info/rfc8446" target="_blank" rel="noopener">RFC 8446</a>. It can  be enabled by adding the value <code>tls13=1</code> to the <code>GODEBUG</code>  environment variable. It will be enabled by default in Go 1.13.</p><p>  To negotiate TLS 1.3, make sure you do not set an explicit <code>MaxVersion</code> in  <a href="/pkg/crypto/tls/#Config"><code>Config</code></a> and run your program with  the environment variable <code>GODEBUG=tls13=1</code> set.</p><p>  All TLS 1.2 features except <code>TLSUnique</code> in  <a href="/pkg/crypto/tls/#ConnectionState"><code>ConnectionState</code></a>  and renegotiation are available in TLS 1.3 and provide equivalent or  better security and performance. Note that even though TLS 1.3 is backwards  compatible with previous versions, certain legacy systems might not work  correctly when attempting to negotiate it. RSA certificate keys too small  to be secure (including 512-bit keys) will not work with TLS 1.3.</p><p>  TLS 1.3 cipher suites are not configurable. All supported cipher suites are  safe, and if <code>PreferServerCipherSuites</code> is set in  <a href="/pkg/crypto/tls/#Config"><code>Config</code></a> the preference order  is based on the available hardware.</p><p>  Early data (also called "0-RTT mode") is not currently supported as a  client or server. Additionally, a Go 1.12 server does not support skipping  unexpected early data if a client sends it. Since TLS 1.3 0-RTT mode  involves clients keeping state regarding which servers support 0-RTT,  a Go 1.12 server cannot be part of a load-balancing pool where some other  servers do support 0-RTT. If switching a domain from a server that supported  0-RTT to a Go 1.12 server, 0-RTT would have to be disabled for at least the  lifetime of the issued session tickets before the switch to ensure  uninterrupted operation.</p><p>  In TLS 1.3 the client is the last one to speak in the handshake, so if it causes  an error to occur on the server, it will be returned on the client by the first  <a href="/pkg/crypto/tls/#Conn.Read"><code>Read</code></a>, not by  <a href="/pkg/crypto/tls/#Conn.Handshake"><code>Handshake</code></a>. For  example, that will be the case if the server rejects the client certificate.  Similarly, session tickets are now post-handshake messages, so are only  received by the client upon its first  <a href="/pkg/crypto/tls/#Conn.Read"><code>Read</code></a>.</p><h3 id="minor_library_changes">Minor changes to the library</h3><p>  As always, there are various minor changes and updates to the library,  made with the Go 1 <a href="/doc/go1compat">promise of compatibility</a>  in mind.</p><!-- TODO: CL 115677: https://golang.org/cl/115677: cmd/vet: check embedded field tags too --><dl id="bufio"><dt><a href="/pkg/bufio/">bufio</a></dt>  <dd>    <p><!-- CL 149297 -->      <code>Reader</code>'s <a href="/pkg/bufio/#Reader.UnreadRune"><code>UnreadRune</code></a> and      <a href="/pkg/bufio/#Reader.UnreadByte"><code>UnreadByte</code></a> methods will now return an error      if they are called after <a href="/pkg/bufio/#Reader.Peek"><code>Peek</code></a>.    </p></dd></dl><!-- bufio --><dl id="bytes"><dt><a href="/pkg/bytes/">bytes</a></dt>  <dd>    <p><!-- CL 137855 -->      The new function <a href="/pkg/bytes/#ReplaceAll"><code>ReplaceAll</code></a> returns a copy of      a byte slice with all non-overlapping instances of a value replaced by another.    </p><pre><code>&lt;p&gt;&lt;!-- CL 145098 --&gt;  A pointer to a zero-value &lt;a href=&quot;/pkg/bytes/#Reader&quot;&gt;&lt;code&gt;Reader&lt;/code&gt;&lt;/a&gt; is now  functionally equivalent to &lt;a href=&quot;/pkg/bytes/#NewReader&quot;&gt;&lt;code&gt;NewReader&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(nil)&lt;/code&gt;.  Prior to Go 1.12, the former could not be used as a substitute for the latter in all cases.&lt;/p&gt;</code></pre></dd></dl><!-- bytes --><dl id="crypto/rand"><dt><a href="/pkg/crypto/rand/">crypto/rand</a></dt>  <dd>    <p><!-- CL 139419 -->      A warning will now be printed to standard error the first time      <code>Reader.Read</code> is blocked for more than 60 seconds waiting      to read entropy from the kernel.    </p><pre><code>&lt;p&gt;&lt;!-- CL 120055 --&gt;  On FreeBSD, &lt;code&gt;Reader&lt;/code&gt; now uses the &lt;code&gt;getrandom&lt;/code&gt;  system call if available, &lt;code&gt;/dev/urandom&lt;/code&gt; otherwise.&lt;/p&gt;</code></pre></dd></dl><!-- crypto/rand --><dl id="crypto/rc4"><dt><a href="/pkg/crypto/rc4/">crypto/rc4</a></dt>  <dd>    <p><!-- CL 130397 -->      This release removes the assembly implementations, leaving only      the pure Go version. The Go compiler generates code that is      either slightly better or slightly worse, depending on the exact      CPU. RC4 is insecure and should only be used for compatibility      with legacy systems.    </p></dd></dl><!-- crypto/rc4 --><dl id="crypto/tls"><dt><a href="/pkg/crypto/tls/">crypto/tls</a></dt>  <dd>    <p><!-- CL 143177 -->      If a client sends an initial message that does not look like TLS, the server      will no longer reply with an alert, and it will expose the underlying      <code>net.Conn</code> in the new field <code>Conn</code> of      <a href="/pkg/crypto/tls/#RecordHeaderError"><code>RecordHeaderError</code></a>.    </p></dd></dl><!-- crypto/tls --><dl id="database/sql"><dt><a href="/pkg/database/sql/">database/sql</a></dt>  <dd>    <p><!-- CL 145738 -->      A query cursor can now be obtained by passing a      <a href="/pkg/database/sql/#Rows"><code>*Rows</code></a>      value to the <a href="/pkg/database/sql/#Row.Scan"><code>Row.Scan</code></a> method.    </p></dd></dl><!-- database/sql --><dl id="expvar"><dt><a href="/pkg/expvar/">expvar</a></dt>  <dd>    <p><!-- CL 139537 -->      The new <a href="/pkg/expvar/#Map.Delete"><code>Delete</code></a> method allows      for deletion of key/value pairs from a <a href="/pkg/expvar/#Map"><code>Map</code></a>.    </p></dd></dl><!-- expvar --><dl id="fmt"><dt><a href="/pkg/fmt/">fmt</a></dt>  <dd>    <p><!-- CL 142737 -->      Maps are now printed in key-sorted order to ease testing. The ordering rules are:      <ul>        <li>When applicable, nil compares low        </li><li>ints, floats, and strings order by <        </li><li>NaN compares less than non-NaN floats        </li><li>bool compares false before true        </li><li>Complex compares real, then imaginary        </li><li>Pointers compare by machine address        </li><li>Channel values compare by machine address        </li><li>Structs compare each field in turn        </li><li>Arrays compare each element in turn        </li><li>Interface values compare first by <code>reflect.Type</code> describing the concrete type            and then by concrete value as described in the previous rules.      </li></ul>    </p><pre><code>&lt;p&gt;&lt;!-- CL 129777 --&gt;  When printing maps, non-reflexive key values like &lt;code&gt;NaN&lt;/code&gt; were previously  displayed as &lt;code&gt;&amp;lt;nil&amp;gt;&lt;/code&gt;. As of this release, the correct values are printed.&lt;/p&gt;</code></pre></dd></dl><!-- fmt --><dl id="go/doc"><dt><a href="/pkg/go/doc/">go/doc</a></dt>  <dd>    <p><!-- CL 140958 -->      To address some outstanding issues in <a href="/cmd/doc/"><code>cmd/doc</code></a>,      this package has a new <a href="/pkg/go/doc/#Mode"><code>Mode</code></a> bit,      <code>PreserveAST</code>, which controls whether AST data is cleared.    </p></dd></dl><!-- go/doc --><dl id="go/token"><dt><a href="/pkg/go/token/">go/token</a></dt>  <dd>    <p><!-- CL 134075 -->      The <a href="/pkg/go/token#File"><code>File</code></a> type has a new      <a href="/pkg/go/token#File.LineStart"><code>LineStart</code></a> field,      which returns the position of the start of a given line. This is especially useful      in programs that occasionally handle non-Go files, such as assembly, but wish to use      the <code>token.Pos</code> mechanism to identify file positions.    </p></dd></dl><!-- go/token --><dl id="image"><dt><a href="/pkg/image/">image</a></dt>  <dd>    <p><!-- CL 118755 -->      The <a href="/pkg/image/#RegisterFormat"><code>RegisterFormat</code></a> function is now safe for concurrent use.    </p></dd></dl><!-- image --><dl id="image/png"><dt><a href="/pkg/image/png/">image/png</a></dt>  <dd>    <p><!-- CL 134235 -->      Paletted images with fewer than 16 colors now encode to smaller outputs.    </p></dd></dl><!-- image/png --><dl id="io"><dt><a href="/pkg/io/">io</a></dt>  <dd>    <p><!-- CL 139457 -->      The new <a href="/pkg/io#StringWriter"><code>StringWriter</code></a> interface wraps the      <a href="/pkg/io/#WriteString"><code>WriteString</code></a> function.    </p></dd></dl><!-- io --><dl id="math"><dt><a href="/pkg/math/">math</a></dt>  <dd>    <p><!-- CL 153059 -->      The functions      <a href="/pkg/math/#Sin"><code>Sin</code></a>,      <a href="/pkg/math/#Cos"><code>Cos</code></a>,      <a href="/pkg/math/#Tan"><code>Tan</code></a>,      and <a href="/pkg/math/#Sincos"><code>Sincos</code></a> now      apply Payne-Hanek range reduction to huge arguments. This      produces more accurate answers, but they will not be bit-for-bit      identical with the results in earlier releases.    </p></dd></dl><!-- math --><dl id="math/bits"><dt><a href="/pkg/math/bits/">math/bits</a></dt>  <dd>    <p><!-- CL 123157 -->    New extended precision operations <a href="/pkg/math/bits/#Add"><code>Add</code></a>, <a href="/pkg/math/bits/#Sub"><code>Sub</code></a>, <a href="/pkg/math/bits/#Mul"><code>Mul</code></a>, and <a href="/pkg/math/bits/#Div"><code>Div</code></a> are available in <code>uint</code>, <code>uint32</code>, and <code>uint64</code> versions.    </p></dd></dl><!-- math/bits --><dl id="net"><dt><a href="/pkg/net/">net</a></dt>  <dd>    <p><!-- CL 146659 -->      The      <a href="/pkg/net/#Dialer.DualStack"><code>Dialer.DualStack</code></a> setting is now ignored and deprecated;      RFC 6555 Fast Fallback ("Happy Eyeballs") is now enabled by default. To disable, set      <a href="/pkg/net/#Dialer.FallbackDelay"><code>Dialer.FallbackDelay</code></a> to a negative value.    </p><pre><code>&lt;p&gt;&lt;!-- CL 107196 --&gt;  Similarly, TCP keep-alives are now enabled by default if  &lt;a href=&quot;/pkg/net/#Dialer.KeepAlive&quot;&gt;&lt;code&gt;Dialer.KeepAlive&lt;/code&gt;&lt;/a&gt; is zero.  To disable, set it to a negative value.&lt;/p&gt;&lt;p&gt;&lt;!-- CL 113997 --&gt;  On Linux, the &lt;a href=&quot;http://man7.org/linux/man-pages/man2/splice.2.html&quot;&gt;&lt;code&gt;splice&lt;/code&gt; system call&lt;/a&gt; is now used when copying from a  &lt;a href=&quot;/pkg/net/#UnixConn&quot;&gt;&lt;code&gt;UnixConn&lt;/code&gt;&lt;/a&gt; to a  &lt;a href=&quot;/pkg/net/#TCPConn&quot;&gt;&lt;code&gt;TCPConn&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</code></pre></dd></dl><!-- net --><dl id="net/http"><dt><a href="/pkg/net/http/">net/http</a></dt>  <dd>    <p><!-- CL 143177 -->      The HTTP server now rejects misdirected HTTP requests to HTTPS servers with a plaintext "400 Bad Request" response.    </p><pre><code>&lt;p&gt;&lt;!-- CL 130115 --&gt;  The new &lt;a href=&quot;/pkg/net/http/#Client.CloseIdleConnections&quot;&gt;&lt;code&gt;Client.CloseIdleConnections&lt;/code&gt;&lt;/a&gt;  method calls the &lt;code&gt;Client&lt;/code&gt;&apos;s underlying &lt;code&gt;Transport&lt;/code&gt;&apos;s &lt;code&gt;CloseIdleConnections&lt;/code&gt;  if it has one.&lt;/p&gt;&lt;p&gt;&lt;!-- CL 145398 --&gt;  The &lt;a href=&quot;/pkg/net/http/#Transport&quot;&gt;&lt;code&gt;Transport&lt;/code&gt;&lt;/a&gt; no longer rejects HTTP responses which declare  HTTP Trailers but don&apos;t use chunked encoding. Instead, the declared trailers are now just ignored.&lt;/p&gt;&lt;p&gt;&lt;!-- CL 152080 --&gt; &lt;!-- CL 151857 --&gt;  The &lt;a href=&quot;/pkg/net/http/#Transport&quot;&gt;&lt;code&gt;Transport&lt;/code&gt;&lt;/a&gt; no longer handles &lt;code&gt;MAX_CONCURRENT_STREAMS&lt;/code&gt; values  advertised from HTTP/2 servers as strictly as it did during Go 1.10 and Go 1.11. The default behavior is now back  to how it was in Go 1.9: each connection to a server can have up to &lt;code&gt;MAX_CONCURRENT_STREAMS&lt;/code&gt; requests  active and then new TCP connections are created as needed. In Go 1.10 and Go 1.11 the &lt;code&gt;http2&lt;/code&gt; package  would block and wait for requests to finish instead of creating new connections.  To get the stricter behavior back, import the  &lt;a href=&quot;https://godoc.org/golang.org/x/net/http2&quot;&gt;&lt;code&gt;golang.org/x/net/http2&lt;/code&gt;&lt;/a&gt; package  directly and set  &lt;a href=&quot;https://godoc.org/golang.org/x/net/http2#Transport.StrictMaxConcurrentStreams&quot;&gt;&lt;code&gt;Transport.StrictMaxConcurrentStreams&lt;/code&gt;&lt;/a&gt; to  &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;</code></pre></dd></dl><!-- net/http --><dl id="net/url"><dt><a href="/pkg/net/url/">net/url</a></dt>  <dd>    <p><!-- CL 159157, CL 160178 -->      <a href="/pkg/net/url/#Parse"><code>Parse</code></a>,      <a href="/pkg/net/url/#ParseRequestURI"><code>ParseRequestURI</code></a>,      and      <a href="/pkg/net/url/#URL.Parse"><code>URL.Parse</code></a>      now return an      error for URLs containing ASCII control characters, which includes NULL,      tab, and newlines.    </p></dd></dl><!-- net/url --><dl id="net/http/httputil"><dt><a href="/pkg/net/http/httputil/">net/http/httputil</a></dt>  <dd>    <p><!-- CL 146437 -->      The <a href="/pkg/net/http/httputil/#ReverseProxy"><code>ReverseProxy</code></a> now automatically      proxies WebSocket requests.    </p></dd></dl><!-- net/http/httputil --><dl id="os"><dt><a href="/pkg/os/">os</a></dt>  <dd>    <p><!-- CL 125443 -->      The new <a href="/pkg/os/#ProcessState.ExitCode"><code>ProcessState.ExitCode</code></a> method      returns the process's exit code.    </p><pre><code>&lt;p&gt;&lt;!-- CL 135075 --&gt;  &lt;code&gt;ModeCharDevice&lt;/code&gt; has been added to the &lt;code&gt;ModeType&lt;/code&gt; bitmask, allowing for  &lt;code&gt;ModeDevice | ModeCharDevice&lt;/code&gt; to be recovered when masking a  &lt;a href=&quot;/pkg/os/#FileMode&quot;&gt;&lt;code&gt;FileMode&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;ModeType&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;&lt;!-- CL 139418 --&gt;  The new function &lt;a href=&quot;/pkg/os/#UserHomeDir&quot;&gt;&lt;code&gt;UserHomeDir&lt;/code&gt;&lt;/a&gt; returns the  current user&apos;s home directory.&lt;/p&gt;&lt;p&gt;&lt;!-- CL 146020 --&gt;  &lt;a href=&quot;/pkg/os/#RemoveAll&quot;&gt;&lt;code&gt;RemoveAll&lt;/code&gt;&lt;/a&gt; now supports paths longer than 4096 characters  on most Unix systems.&lt;/p&gt;&lt;p&gt;&lt;!-- CL 130676 --&gt;  &lt;a href=&quot;/pkg/os/#File.Sync&quot;&gt;&lt;code&gt;File.Sync&lt;/code&gt;&lt;/a&gt; now uses &lt;code&gt;F_FULLFSYNC&lt;/code&gt; on macOS  to correctly flush the file contents to permanent storage.  This may cause the method to run more slowly than in previous releases.&lt;/p&gt;&lt;p&gt;&lt;!--CL 155517 --&gt;  &lt;a href=&quot;/pkg/os/#File&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; now supports  a &lt;a href=&quot;/pkg/os/#File.SyscallConn&quot;&gt;&lt;code&gt;SyscallConn&lt;/code&gt;&lt;/a&gt;  method returning  a &lt;a href=&quot;/pkg/syscall/#RawConn&quot;&gt;&lt;code&gt;syscall.RawConn&lt;/code&gt;&lt;/a&gt;  interface value. This may be used to invoke system-specific  operations on the underlying file descriptor.&lt;/p&gt;</code></pre></dd></dl><!-- os --><dl id="path/filepath"><dt><a href="/pkg/path/filepath/">path/filepath</a></dt>  <dd>    <p><!-- CL 145220 -->      The <a href="/pkg/path/filepath/#IsAbs"><code>IsAbs</code></a> function now returns true when passed      a reserved filename on Windows such as <code>NUL</code>.      <a href="https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#naming-conventions" target="_blank" rel="noopener">List of reserved names.</a>    </p></dd></dl><!-- path/filepath --><dl id="reflect"><dt><a href="/pkg/reflect/">reflect</a></dt>  <dd>    <p><!-- CL 33572 -->      A new <a href="/pkg/reflect#MapIter"><code>MapIter</code></a> type is      an iterator for ranging over a map. This type is exposed through the      <a href="/pkg/reflect#Value"><code>Value</code></a> type's new      <a href="/pkg/reflect#Value.MapRange"><code>MapRange</code></a> method.      This follows the same iteration semantics as a range statement, with <code>Next</code>      to advance the iterator, and <code>Key</code>/<code>Value</code> to access each entry.    </p></dd></dl><!-- reflect --><dl id="regexp"><dt><a href="/pkg/regexp/">regexp</a></dt>  <dd>    <p><!-- CL 139784 -->      <a href="/pkg/regexp/#Regexp.Copy"><code>Copy</code></a> is no longer necessary      to avoid lock contention, so it has been given a partial deprecation comment.      <a href="/pkg/regexp/#Regexp.Copy"><code>Copy</code></a>      may still be appropriate if the reason for its use is to make two copies with      different <a href="/pkg/regexp/#Regexp.Longest"><code>Longest</code></a> settings.    </p></dd></dl><!-- regexp --><dl id="runtime/debug"><dt><a href="/pkg/runtime/debug/">runtime/debug</a></dt>  <dd>    <p><!-- CL 144220 -->      A new <a href="/pkg/runtime/debug/#BuildInfo"><code>BuildInfo</code></a> type      exposes the build information read from the running binary, available only in      binaries built with module support. This includes the main package path, main      module information, and the module dependencies. This type is given through the      <a href="/pkg/runtime/debug/#ReadBuildInfo"><code>ReadBuildInfo</code></a> function      on <a href="/pkg/runtime/debug/#BuildInfo"><code>BuildInfo</code></a>.    </p></dd></dl><!-- runtime/debug --><dl id="strings"><dt><a href="/pkg/strings/">strings</a></dt>  <dd>    <p><!-- CL 137855 -->      The new function <a href="/pkg/strings/#ReplaceAll"><code>ReplaceAll</code></a> returns a copy of      a string with all non-overlapping instances of a value replaced by another.    </p><pre><code>&lt;p&gt;&lt;!-- CL 145098 --&gt;  A pointer to a zero-value &lt;a href=&quot;/pkg/strings/#Reader&quot;&gt;&lt;code&gt;Reader&lt;/code&gt;&lt;/a&gt; is now  functionally equivalent to &lt;a href=&quot;/pkg/strings/#NewReader&quot;&gt;&lt;code&gt;NewReader&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(nil)&lt;/code&gt;.  Prior to Go 1.12, the former could not be used as a substitute for the latter in all cases.&lt;/p&gt;&lt;p&gt;&lt;!-- CL 122835 --&gt;  The new &lt;a href=&quot;/pkg/strings/#Builder.Cap&quot;&gt;&lt;code&gt;Builder.Cap&lt;/code&gt;&lt;/a&gt; method returns the capacity of the builder&apos;s underlying byte slice.&lt;/p&gt;&lt;p&gt;&lt;!-- CL 131495 --&gt;  The character mapping functions &lt;a href=&quot;/pkg/strings/#Map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt;,  &lt;a href=&quot;/pkg/strings/#Title&quot;&gt;&lt;code&gt;Title&lt;/code&gt;&lt;/a&gt;,  &lt;a href=&quot;/pkg/strings/#ToLower&quot;&gt;&lt;code&gt;ToLower&lt;/code&gt;&lt;/a&gt;,  &lt;a href=&quot;/pkg/strings/#ToLowerSpecial&quot;&gt;&lt;code&gt;ToLowerSpecial&lt;/code&gt;&lt;/a&gt;,  &lt;a href=&quot;/pkg/strings/#ToTitle&quot;&gt;&lt;code&gt;ToTitle&lt;/code&gt;&lt;/a&gt;,  &lt;a href=&quot;/pkg/strings/#ToTitleSpecial&quot;&gt;&lt;code&gt;ToTitleSpecial&lt;/code&gt;&lt;/a&gt;,  &lt;a href=&quot;/pkg/strings/#ToUpper&quot;&gt;&lt;code&gt;ToUpper&lt;/code&gt;&lt;/a&gt;, and  &lt;a href=&quot;/pkg/strings/#ToUpperSpecial&quot;&gt;&lt;code&gt;ToUpperSpecial&lt;/code&gt;&lt;/a&gt;  now always guarantee to return valid UTF-8. In earlier releases, if the input was invalid UTF-8 but no character replacements  needed to be applied, these routines incorrectly returned the invalid UTF-8 unmodified.&lt;/p&gt;</code></pre></dd></dl><!-- strings --><dl id="syscall"><dt><a href="/pkg/syscall/">syscall</a></dt>  <dd>    <p><!-- CL 138595 -->      64-bit inodes are now supported on FreeBSD 12. Some types have been adjusted accordingly.    </p><pre><code>&lt;p&gt;&lt;!-- CL 125456 --&gt;  The Unix socket  (&lt;a href=&quot;https://blogs.msdn.microsoft.com/commandline/2017/12/19/af_unix-comes-to-windows/&quot;&gt;&lt;code&gt;AF_UNIX&lt;/code&gt;&lt;/a&gt;)  address family is now supported for compatible versions of Windows.&lt;/p&gt;&lt;p&gt;&lt;!-- CL 147117 --&gt;  The new function  &lt;a href=&quot;/pkg/syscall/?GOOS=windows&amp;GOARCH=amd64#Syscall18&quot;&gt;&lt;code&gt;Syscall18&lt;/code&gt;&lt;/a&gt;  has been introduced for Windows, allowing for calls with up to 18 arguments.&lt;/p&gt;</code></pre></dd></dl><!-- syscall --><dl id="syscall/js"><dt><a href="/pkg/syscall/js/">syscall/js</a></dt>  <dd>    <p><!-- CL 153559 -->    </p><p>      The <code>Callback</code> type and <code>NewCallback</code> function have been renamed;      they are now called      <a href="/pkg/syscall/js/?GOOS=js&GOARCH=wasm#Func"><code>Func</code></a> and      <a href="/pkg/syscall/js/?GOOS=js&GOARCH=wasm#FuncOf"><code>FuncOf</code></a>, respectively.      This is a breaking change, but WebAssembly support is still experimental      and not yet subject to the      <a href="/doc/go1compat">Go 1 compatibility promise</a>. Any code using the      old names will need to be updated.    </p><pre><code>&lt;p&gt;&lt;!-- CL 141644 --&gt;  If a type implements the new  &lt;a href=&quot;/pkg/syscall/js/?GOOS=js&amp;GOARCH=wasm#Wrapper&quot;&gt;&lt;code&gt;Wrapper&lt;/code&gt;&lt;/a&gt;  interface,  &lt;a href=&quot;/pkg/syscall/js/?GOOS=js&amp;GOARCH=wasm#ValueOf&quot;&gt;&lt;code&gt;ValueOf&lt;/code&gt;&lt;/a&gt;  will use it to return the JavaScript value for that type.&lt;/p&gt;&lt;p&gt;&lt;!-- CL 143137 --&gt;  The meaning of the zero  &lt;a href=&quot;/pkg/syscall/js/?GOOS=js&amp;GOARCH=wasm#Value&quot;&gt;&lt;code&gt;Value&lt;/code&gt;&lt;/a&gt;  has changed. It now represents the JavaScript &lt;code&gt;undefined&lt;/code&gt; value  instead of the number zero.  This is a breaking change, but WebAssembly support is still experimental  and not yet subject to the  &lt;a href=&quot;/doc/go1compat&quot;&gt;Go 1 compatibility promise&lt;/a&gt;. Any code relying on  the zero &lt;a href=&quot;/pkg/syscall/js/?GOOS=js&amp;GOARCH=wasm#Value&quot;&gt;&lt;code&gt;Value&lt;/code&gt;&lt;/a&gt;  to mean the number zero will need to be updated.&lt;/p&gt;&lt;p&gt;&lt;!-- CL 144384 --&gt;  The new  &lt;a href=&quot;/pkg/syscall/js/?GOOS=js&amp;GOARCH=wasm#Value.Truthy&quot;&gt;&lt;code&gt;Value.Truthy&lt;/code&gt;&lt;/a&gt;  method reports the  &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Truthy&quot;&gt;JavaScript &quot;truthiness&quot;&lt;/a&gt;  of a given value.&lt;/p&gt;</code></pre></dd></dl><!-- syscall/js --><dl id="testing"><dt><a href="/pkg/testing/">testing</a></dt>  <dd>    <p><!-- CL 139258 -->    The <a href="/cmd/go/#hdr-Testing_flags"><code>-benchtime</code></a> flag now supports setting an explicit iteration count instead of a time when the value ends with an "<code>x</code>". For example, <code>-benchtime=100x</code> runs the benchmark 100 times.    </p></dd></dl><!-- testing --><dl id="text/template"><dt><a href="/pkg/text/template/">text/template</a></dt>  <dd>    <p><!-- CL 142217 -->      When executing a template, long context values are no longer truncated in errors.    </p>    <p>      <code>executing "tmpl" at <.very.deep.context.v...>: map has no entry for key "notpresent"</.very.deep.context.v...></code>    </p>    <p>      is now    </p>    <p>      <code>executing "tmpl" at <.very.deep.context.value.notpresent>: map has no entry for key "notpresent"</.very.deep.context.value.notpresent></code>    </p>  <dd>    <p><!-- CL 143097 -->      If a user-defined function called by a template panics, the      panic is now caught and returned as an error by      the <code>Execute</code> or <code>ExecuteTemplate</code> method.    </p></dd></dd></dl><!-- text/template --><dl id="time"><dt><a href="/pkg/time/">time</a></dt>  <dd>    <p><!-- CL 151299 -->      The time zone database in <code>$GOROOT/lib/time/zoneinfo.zip</code>      has been updated to version 2018i. Note that this ZIP file is      only used if a time zone database is not provided by the operating      system.    </p></dd></dl><!-- time --><dl id="unsafe"><dt><a href="/pkg/unsafe/">unsafe</a></dt>  <dd>    <p><!-- CL 146058 -->      It is invalid to convert a nil <code>unsafe.Pointer</code> to <code>uintptr</code> and back with arithmetic.      (This was already invalid, but will now cause the compiler to misbehave.)    </p></dd></dl><!-- unsafe -->]]></content>
      
      
      <categories>
          
          <category> Go版本 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Go代码Review建议</title>
      <link href="/code_review_comments/"/>
      <url>/code_review_comments/</url>
      
        <content type="html"><![CDATA[<p>本页不是一个全面的的风格指南, 只是一个常见问题的清单。这些问题是在review Go代码时会经常遇到的, 所以有些解释比较简略。你可以把它看作是<a href="https://golang.org/doc/effective_go.html" target="_blank" rel="noopener">《Effective Go》</a>的补充。</p><h2 id="Gofmt"><a href="#Gofmt" class="headerlink" title="Gofmt"></a>Gofmt</h2><p><a href="https://golang.org/cmd/gofmt/" target="_blank" rel="noopener">gofmt</a>在Go代码中被广泛使用, 对代码运行gofmt可以自动修复绝大多数的基础代码格式问题。</p><p>还有一种选择是使用<a href="https://godoc.org/golang.org/x/tools/cmd/goimports" target="_blank" rel="noopener">goimports</a>，它是gofmt的一个超集，可以根据需要自动添加（和删除）import行。</p><h2 id="注释语句"><a href="#注释语句" class="headerlink" title="注释语句"></a>注释语句</h2><p>建议先看看<a href="https://golang.org/doc/effective_go.html#commentary" target="_blank" rel="noopener">《Effective Go》中对注释的建议</a>。 注释语句应当书写一个完整的句子, 尽管这看上去有些啰嗦, 却使它们在提取到GoDoc文档中的时候格式良好。注释应当以所描述对象的名称开始，并以句号结束:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Request represents a request to run a command.</span></span><br><span class="line"><span class="keyword">type</span> Request <span class="keyword">struct</span> &#123; ...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Encode writes the JSON encoding of req to w.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Encode</span><span class="params">(w io.Writer, req *Request)</span></span> &#123; ...</span><br></pre></td></tr></table></figure><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><p>Values of the context.Context type carry security credentials,<br>tracing information, deadlines, and cancellation signals across API<br>and process boundaries. Go programs pass Contexts explicitly along<br>the entire function call chain from incoming RPCs and HTTP requests<br>to outgoing requests.</p><p>Most functions that use a Context should accept it as their first parameter:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">F</span><span class="params">(ctx context.Context, /* other arguments */)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>A function that is never request-specific may use context.Background(),<br>but err on the side of passing a Context even if you think you don’t need<br>to. The default case is to pass a Context; only use context.Background()<br>directly if you have a good reason why the alternative is a mistake.</p><p>Don’t add a Context member to a struct type; instead add a ctx parameter<br>to each method on that type that needs to pass it along. The one exception<br>is for methods whose signature must match an interface in the standard library<br>or in a third party library.</p><p>Don’t create custom Context types or use interfaces other than Context in<br>function signatures.</p><p>If you have application data to pass around, put it in a parameter,<br>in the receiver, in globals, or, if it truly belongs there, in a Context value.</p><p>Contexts are immutable, so it’s fine to pass the same ctx to multiple<br>calls that share the same deadline, cancellation signal, credentials,<br>parent trace, etc.</p><h2 id="Copying"><a href="#Copying" class="headerlink" title="Copying"></a>Copying</h2><p>To avoid unexpected aliasing, be careful when copying a struct from another package.<br>For example, the bytes.Buffer type contains a <code>[]byte</code> slice and, as an optimization<br>for small strings, a small byte array to which the slice may refer. If you copy a <code>Buffer</code>,the slice in the copy may alias the array in the original, causing subsequent method<br>calls to have surprising effects.</p><p>In general, do not copy a value of type <code>T</code> if its methods are associated with the<br>pointer type, <code>*T</code>.</p><h2 id="Declaring-Empty-Slices"><a href="#Declaring-Empty-Slices" class="headerlink" title="Declaring Empty Slices"></a>Declaring Empty Slices</h2><p>When declaring an empty slice, prefer</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t []<span class="keyword">string</span></span><br></pre></td></tr></table></figure><p>over </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t := []<span class="keyword">string</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>The former declares a nil slice value, while the latter is non-nil but zero-length. They are functionally equivalent—their <code>len</code> and <code>cap</code> are both zero—but the nil slice is the preferred style.</p><p>Note that there are limited circumstances where a non-nil but zero-length slice is preferred, such as when encoding JSON objects (a <code>nil</code> slice encodes to <code>null</code>, while <code>[]string{}</code> encodes to the JSON array <code>[]</code>).</p><p>When designing interfaces, avoid making a distinction between a nil slice and a non-nil, zero-length slice, as this can lead to subtle programming errors.</p><p>For more discussion about nil in Go see Francesc Campoy’s talk <a href="https://www.youtube.com/watch?v=ynoY2xz-F8s" target="_blank" rel="noopener">Understanding Nil</a>.</p><h2 id="Crypto-Rand"><a href="#Crypto-Rand" class="headerlink" title="Crypto Rand"></a>Crypto Rand</h2><p>Do not use package <code>math/rand</code> to generate keys, even throwaway ones.<br>Unseeded, the generator is completely predictable. Seeded with <code>time.Nanoseconds()</code>,there are just a few bits of entropy. Instead, use <code>crypto/rand</code>‘s Reader,<br>and if you need text, print to hexadecimal or base64:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"crypto/rand"</span></span><br><span class="line">    <span class="comment">// "encoding/base64"</span></span><br><span class="line">    <span class="comment">// "encoding/hex"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Key</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">16</span>)</span><br><span class="line">    _, err := rand.Read(buf)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)  <span class="comment">// out of randomness, should never happen</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"%x"</span>, buf)</span><br><span class="line">    <span class="comment">// or hex.EncodeToString(buf)</span></span><br><span class="line">    <span class="comment">// or base64.StdEncoding.EncodeToString(buf)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Doc-Comments"><a href="#Doc-Comments" class="headerlink" title="Doc Comments"></a>Doc Comments</h2><p>All top-level, exported names should have doc comments, as should non-trivial unexported type or function declarations. See <a href="https://golang.org/doc/effective_go.html#commentary" target="_blank" rel="noopener">https://golang.org/doc/effective_go.html#commentary</a> for more information about commentary conventions.</p><h2 id="不要滥用Panic"><a href="#不要滥用Panic" class="headerlink" title="不要滥用Panic"></a>不要滥用Panic</h2><p>See <a href="https://golang.org/doc/effective_go.html#errors" target="_blank" rel="noopener">https://golang.org/doc/effective_go.html#errors</a>. Don’t use panic for normal error handling. Use error and multiple return values.</p><h2 id="Error-Strings"><a href="#Error-Strings" class="headerlink" title="Error Strings"></a>Error Strings</h2><p>Error strings should not be capitalized (unless beginning with proper nouns or acronyms) or end with punctuation, since they are usually printed following other context. That is, use <code>fmt.Errorf(&quot;something bad&quot;)</code> not <code>fmt.Errorf(&quot;Something bad&quot;)</code>, so that <code>log.Printf(&quot;Reading %s: %v&quot;, filename, err)</code> formats without a spurious capital letter mid-message. This does not apply to logging, which is implicitly line-oriented and not combined inside other messages.</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>When adding a new package, include examples of intended usage: a runnable Example,<br>or a simple test demonstrating a complete call sequence.</p><p>Read more about <a href="https://blog.golang.org/examples" target="_blank" rel="noopener">testable Example() functions</a>.</p><h2 id="Goroutine生命周期"><a href="#Goroutine生命周期" class="headerlink" title="Goroutine生命周期"></a>Goroutine生命周期</h2><p>When you spawn goroutines, make it clear when - or whether - they exit.</p><p>Goroutines can leak by blocking on channel sends or receives: the garbage collector<br>will not terminate a goroutine even if the channels it is blocked on are unreachable.</p><p>Even when goroutines do not leak, leaving them in-flight when they are no longer<br>needed can cause other subtle and hard-to-diagnose problems. Sends on closed channels<br>panic. Modifying still-in-use inputs “after the result isn’t needed” can still lead<br>to data races. And leaving goroutines in-flight for arbitrarily long can lead to<br>unpredictable memory usage.</p><p>Try to keep concurrent code simple enough that goroutine lifetimes are obvious.<br>If that just isn’t feasible, document when and why the goroutines exit.</p><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>See <a href="https://golang.org/doc/effective_go.html#errors" target="_blank" rel="noopener">https://golang.org/doc/effective_go.html#errors</a>. Do not discard errors using <code>_</code> variables. If a function returns an error, check it to make sure the function succeeded. Handle the error, return it, or, in truly exceptional situations, panic.</p><h2 id="Imports"><a href="#Imports" class="headerlink" title="Imports"></a>Imports</h2><p>Avoid renaming imports except to avoid a name collision; good package names<br>should not require renaming. In the event of collision, prefer to rename the most<br>local or project-specific import.</p><p>Imports are organized in groups, with blank lines between them.<br>The standard library packages are always in the first group.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"hash/adler32"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"appengine/foo"</span></span><br><span class="line"><span class="string">"appengine/user"</span></span><br><span class="line"></span><br><span class="line">        <span class="string">"github.com/foo/bar"</span></span><br><span class="line"><span class="string">"rsc.io/goversion/version"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><a href="https://godoc.org/golang.org/x/tools/cmd/goimports" target="_blank" rel="noopener">goimports</a> will do this for you.</p><h2 id="ImportBlank"><a href="#ImportBlank" class="headerlink" title="ImportBlank"></a>ImportBlank</h2><p>Packages that are imported only for their side effects (using the syntax <code>import_ &quot;pkg&quot;</code>) should only be imported in the main package of a program, or in tests<br>that require them.</p><h2 id="Import-Dot"><a href="#Import-Dot" class="headerlink" title="Import Dot"></a>Import Dot</h2><p>The import . form can be useful in tests that, due to circular dependencies, cannot be made part of the package being tested:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> foo_test</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bar/testutil"</span> <span class="comment">// also imports "foo"</span></span><br><span class="line">. <span class="string">"foo"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>In this case, the test file cannot be in package foo because it uses bar/testutil, which imports foo.  So we use the ‘import .’ form to let the file pretend to be part of package foo even though it is not.  Except for this one case, do not use import . in your programs.  It makes the programs much harder to read because it is unclear whether a name like Quux is a top-level identifier in the current package or in an imported package.</p><h2 id="In-Band-Errors"><a href="#In-Band-Errors" class="headerlink" title="In-Band Errors"></a>In-Band Errors</h2><p>In C and similar languages, it’s common for functions to return values like -1<br>or null to signal errors or missing results:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Lookup returns the value for key or "" if there is no mapping for key.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Lookup</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="title">string</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// <span class="title">Failing</span> <span class="title">to</span> <span class="title">check</span> <span class="title">a</span> <span class="title">for</span> <span class="title">an</span> <span class="title">in</span>-<span class="title">band</span> <span class="title">error</span> <span class="title">value</span> <span class="title">can</span> <span class="title">lead</span> <span class="title">to</span> <span class="title">bugs</span>:</span></span><br><span class="line"><span class="function"><span class="title">Parse</span><span class="params">(Lookup(key)</span>)  // <span class="title">returns</span> "<span class="title">parse</span> <span class="title">failure</span> <span class="title">for</span> <span class="title">value</span>" <span class="title">instead</span> <span class="title">of</span> "<span class="title">no</span> <span class="title">value</span> <span class="title">for</span> <span class="title">key</span>"</span></span><br></pre></td></tr></table></figure><p>Go’s support for multiple return values provides a better solution.<br>Instead of requiring clients to check for an in-band error value, a function should return<br>an additional value to indicate whether its other return values are valid. This return<br>value may be an error, or a boolean when no explanation is needed.<br>It should be the final return value.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Lookup returns the value for key or ok=false if there is no mapping for key.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Lookup</span><span class="params">(key <span class="keyword">string</span>)</span> <span class="params">(value <span class="keyword">string</span>, ok <span class="keyword">bool</span>)</span></span></span><br></pre></td></tr></table></figure><p>This prevents the caller from using the result incorrectly:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Parse(Lookup(key))  <span class="comment">// compile-time error</span></span><br></pre></td></tr></table></figure><p>And encourages more robust and readable code:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">value, ok := Lookup(key)</span><br><span class="line"><span class="keyword">if</span> !ok  &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Errorf(<span class="string">"no value for %q"</span>, key)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Parse(value)</span><br></pre></td></tr></table></figure><p>This rule applies to exported functions but is also useful<br>for unexported functions.</p><p>Return values like nil, “”, 0, and -1 are fine when they are<br>valid results for a function, that is, when the caller need not<br>handle them differently from other values.</p><p>Some standard library functions, like those in package “strings”,<br>return in-band error values. This greatly simplifies string-manipulation<br>code at the cost of requiring more diligence from the programmer.<br>In general, Go code should return additional values for errors.</p><h2 id="Indent-Error-Flow"><a href="#Indent-Error-Flow" class="headerlink" title="Indent Error Flow"></a>Indent Error Flow</h2><p>Try to keep the normal code path at a minimal indentation, and indent the error handling, dealing with it first. This improves the readability of the code by permitting visually scanning the normal path quickly. For instance, don’t write:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// error handling</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// normal code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Instead, write:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// error handling</span></span><br><span class="line"><span class="keyword">return</span> <span class="comment">// or continue, etc.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// normal code</span></span><br></pre></td></tr></table></figure><p>If the <code>if</code> statement has an initialization statement, such as:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x, err := f(); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// error handling</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// use x</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>then this may require moving the short variable declaration to its own line:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x, err := f()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// error handling</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// use x</span></span><br></pre></td></tr></table></figure><h2 id="Initialisms"><a href="#Initialisms" class="headerlink" title="Initialisms"></a>Initialisms</h2><p>Words in names that are initialisms or acronyms (e.g. “URL” or “NATO”) have a consistent case. For example, “URL” should appear as “URL” or “url” (as in “urlPony”, or “URLPony”), never as “Url”. As an example: ServeHTTP not ServeHttp. For identifiers with multiple initialized “words”, use for example “xmlHTTPRequest” or “XMLHTTPRequest”.</p><p>This rule also applies to “ID” when it is short for “identifier” (which is pretty much all cases when it’s not the “id” as in “ego”, “superego”), so write “appID” instead of “appId”.</p><p>Code generated by the protocol buffer compiler is exempt from this rule. Human-written code is held to a higher standard than machine-written code.</p><h2 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h2><p>Go interfaces generally belong in the package that uses values of the<br>interface type, not the package that implements those values. The<br>implementing package should return concrete (usually pointer or struct)<br>types: that way, new methods can be added to implementations without<br>requiring extensive refactoring.</p><p>Do not define interfaces on the implementor side of an API “for mocking”;<br>instead, design the API so that it can be tested using the public API of<br>the real implementation.</p><p>Do not define interfaces before they are used: without a realistic example<br>of usage, it is too difficult to see whether an interface is even necessary,<br>let alone what methods it ought to contain.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> consumer  <span class="comment">// consumer.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Thinger <span class="keyword">interface</span> &#123; Thing() <span class="keyword">bool</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Foo</span><span class="params">(t Thinger)</span> <span class="title">string</span></span> &#123; … &#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> consumer <span class="comment">// consumer_test.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> fakeThinger <span class="keyword">struct</span>&#123; … &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t fakeThinger)</span> <span class="title">Thing</span><span class="params">()</span> <span class="title">bool</span></span> &#123; … &#125;</span><br><span class="line">…</span><br><span class="line"><span class="keyword">if</span> Foo(fakeThinger&#123;…&#125;) == <span class="string">"x"</span> &#123; … &#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DO NOT DO IT!!!</span></span><br><span class="line"><span class="keyword">package</span> producer</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Thinger <span class="keyword">interface</span> &#123; Thing() <span class="keyword">bool</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> defaultThinger <span class="keyword">struct</span>&#123; … &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t defaultThinger)</span> <span class="title">Thing</span><span class="params">()</span> <span class="title">bool</span></span> &#123; … &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewThinger</span><span class="params">()</span> <span class="title">Thinger</span></span> &#123; <span class="keyword">return</span> defaultThinger&#123; … &#125; &#125;</span><br></pre></td></tr></table></figure><p>Instead return a concrete type and let the consumer mock the producer implementation.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> producer</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Thinger <span class="keyword">struct</span>&#123; … &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t Thinger)</span> <span class="title">Thing</span><span class="params">()</span> <span class="title">bool</span></span> &#123; … &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewThinger</span><span class="params">()</span> <span class="title">Thinger</span></span> &#123; <span class="keyword">return</span> Thinger&#123; … &#125; &#125;</span><br></pre></td></tr></table></figure><h2 id="一行代码的长度"><a href="#一行代码的长度" class="headerlink" title="一行代码的长度"></a>一行代码的长度</h2><p>There is no rigid line length limit in Go code, but avoid uncomfortably long lines.<br>Similarly, don’t add line breaks to keep lines short when they are more readable long–for example,<br>if they are repetitive.</p><p>Most of the time when people wrap lines “unnaturally” (in the middle of function calls or<br>function declarations, more or less, say, though some exceptions are around), the wrapping would be<br>unnecessary if they had a reasonable number of parameters and reasonably short variable names.<br>Long lines seem to go with long names, and getting rid of the long names helps a lot.</p><p>In other words, break lines because of the semantics of what you’re writing (as a general rule)<br>and not because of the length of the line. If you find that this produces lines that are too long,<br>then change the names or the semantics and you’ll probably get a good result.</p><p>This is, actually, exactly the same advice about how long a function should be. There’s no rule<br>“never have a function more than N lines long”, but there is definitely such a thing as too long<br>of a function, and of too stuttery tiny functions, and the solution is to change where the function<br>boundaries are, not to start counting lines.</p><h2 id="Mixed-Caps"><a href="#Mixed-Caps" class="headerlink" title="Mixed Caps"></a>Mixed Caps</h2><p>See <a href="https://golang.org/doc/effective_go.html#mixed-caps" target="_blank" rel="noopener">https://golang.org/doc/effective_go.html#mixed-caps</a>. This applies even when it breaks conventions in other languages. For example an unexported constant is <code>maxLength</code> not <code>MaxLength</code> or <code>MAX_LENGTH</code>.</p><p>Also see <a href="https://github.com/golang/go/wiki/CodeReviewComments#initialisms" target="_blank" rel="noopener">Initialisms</a>.</p><h2 id="Named-Result-Parameters"><a href="#Named-Result-Parameters" class="headerlink" title="Named Result Parameters"></a>Named Result Parameters</h2><p>Consider what it will look like in godoc.  Named result parameters like:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Node)</span> <span class="title">Parent1</span><span class="params">()</span> <span class="params">(node *Node)</span></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(n *Node)</span> <span class="title">Parent2</span><span class="params">()</span> <span class="params">(node *Node, err error)</span></span></span><br></pre></td></tr></table></figure><p>will stutter in godoc; better to use:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(n *Node)</span> <span class="title">Parent1</span><span class="params">()</span> *<span class="title">Node</span></span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="params">(n *Node)</span> <span class="title">Parent2</span><span class="params">()</span> <span class="params">(*Node, error)</span></span></span><br></pre></td></tr></table></figure><p>On the other hand, if a function returns two or three parameters of the same type,<br>or if the meaning of a result isn’t clear from context, adding names may be useful<br>in some contexts. Don’t name result parameters just to avoid declaring a var inside<br>the function; that trades off a minor implementation brevity at the cost of<br>unnecessary API verbosity.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *Foo)</span> <span class="title">Location</span><span class="params">()</span> <span class="params">(<span class="keyword">float64</span>, <span class="keyword">float64</span>, error)</span></span></span><br></pre></td></tr></table></figure><p>is less clear than:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Location returns f's latitude and longitude.</span></span><br><span class="line"><span class="comment">// Negative values mean south and west, respectively.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *Foo)</span> <span class="title">Location</span><span class="params">()</span> <span class="params">(lat, long <span class="keyword">float64</span>, err error)</span></span></span><br></pre></td></tr></table></figure><p>Naked returns are okay if the function is a handful of lines. Once it’s a medium<br>sized function, be explicit with your return values. Corollary: it’s not worth it<br>to name result parameters just because it enables you to use naked returns.<br>Clarity of docs is always more important than saving a line or two in your function.</p><p>Finally, in some cases you need to name a result parameter in order to change<br>it in a deferred closure. That is always OK.</p><h2 id="Naked-Returns"><a href="#Naked-Returns" class="headerlink" title="Naked Returns"></a>Naked Returns</h2><p>See <a href="#named-result-parameters">Named Result Parameters</a>.</p><h2 id="Package-Comments"><a href="#Package-Comments" class="headerlink" title="Package Comments"></a>Package Comments</h2><p>Package comments, like all comments to be presented by godoc, must appear adjacent to the package clause, with no blank line.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Package math provides basic constants and mathematical functions.</span></span><br><span class="line"><span class="keyword">package</span> math</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Package template implements data-driven templates for generating textual</span></span><br><span class="line"><span class="comment">output such as HTML.</span></span><br><span class="line"><span class="comment">....</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> template</span><br></pre></td></tr></table></figure><p>For “package main” comments, other styles of comment are fine after the binary name (and it may be capitalized if it comes first), For example, for a <code>package main</code> in the directory <code>seedgen</code> you could write:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Binary seedgen ...</span></span><br><span class="line"><span class="keyword">package</span> main</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Command seedgen ...</span></span><br><span class="line"><span class="keyword">package</span> main</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Program seedgen ...</span></span><br><span class="line"><span class="keyword">package</span> main</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The seedgen command ...</span></span><br><span class="line"><span class="keyword">package</span> main</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The seedgen program ...</span></span><br><span class="line"><span class="keyword">package</span> main</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Seedgen ..</span></span><br><span class="line"><span class="keyword">package</span> main</span><br></pre></td></tr></table></figure><p>These are examples, and sensible variants of these are acceptable.</p><p>Note that starting the sentence with a lower-case word is not among the<br>acceptable options for package comments, as these are publicly-visible and<br>should be written in proper English, including capitalizing the first word<br>of the sentence. When the binary name is the first word, capitalizing it is<br>required even though it does not strictly match the spelling of the<br>command-line invocation.</p><p>See <a href="https://golang.org/doc/effective_go.html#commentary" target="_blank" rel="noopener">https://golang.org/doc/effective_go.html#commentary</a> for more information about commentary conventions.</p><h2 id="Package-Names"><a href="#Package-Names" class="headerlink" title="Package Names"></a>Package Names</h2><p>All references to names in your package will be done using the package name,<br>so you can omit that name from the identifiers. For example, if you are in package chubby,<br>you don’t need type ChubbyFile, which clients will write as <code>chubby.ChubbyFile</code>.Instead, name the type <code>File</code>, which clients will write as <code>chubby.File</code>.Avoid meaningless package names like util, common, misc, api, types, and interfaces. See <a href="http://golang.org/doc/effective_go.html#package-names" target="_blank" rel="noopener">http://golang.org/doc/effective_go.html#package-names</a> and<br><a href="http://blog.golang.org/package-names" target="_blank" rel="noopener">http://blog.golang.org/package-names</a> for more.</p><h2 id="Pass-Values"><a href="#Pass-Values" class="headerlink" title="Pass Values"></a>Pass Values</h2><p>Don’t pass pointers as function arguments just to save a few bytes.  If a function refers to its argument <code>x</code> only as <code>*x</code> throughout, then the argument shouldn’t be a pointer.  Common instances of this include passing a pointer to a string (<code>*string</code>) or a pointer to an interface value (<code>*io.Reader</code>).  In both cases the value itself is a fixed size and can be passed directly.  This advice does not apply to large structs, or even small structs that might grow.</p><h2 id="Receiver-Names"><a href="#Receiver-Names" class="headerlink" title="Receiver Names"></a>Receiver Names</h2><p>The name of a method’s receiver should be a reflection of its identity; often a one or two letter abbreviation of its type suffices (such as “c” or “cl” for “Client”). Don’t use generic names such as “me”, “this” or “self”, identifiers typical of object-oriented languages that gives the method a special meaning. In Go, the receiver of a method is just another parameter and therefore, should be named accordingly. The name need not be as descriptive as that of a method argument, as its role is obvious and serves no documentary purpose. It can be very short as it will appear on almost every line of every method of the type; familiarity admits brevity. Be consistent, too: if you call the receiver “c” in one method, don’t call it “cl” in another.</p><h2 id="Receiver-Type"><a href="#Receiver-Type" class="headerlink" title="Receiver Type"></a>Receiver Type</h2><p>Choosing whether to use a value or pointer receiver on methods can be difficult, especially to new Go programmers.  If in doubt, use a pointer, but there are times when a value receiver makes sense, usually for reasons of efficiency, such as for small unchanging structs or values of basic type. Some useful guidelines:</p><ul><li>If the receiver is a map, func or chan, don’t use a pointer to them. If the receiver is a slice and the method doesn’t reslice or reallocate the slice, don’t use a pointer to it.</li><li>If the method needs to mutate the receiver, the receiver must be a pointer.</li><li>If the receiver is a struct that contains a sync.Mutex or similar synchronizing field, the receiver must be a pointer to avoid copying.</li><li>If the receiver is a large struct or array, a pointer receiver is more efficient.  How large is large?  Assume it’s equivalent to passing all its elements as arguments to the method.  If that feels too large, it’s also too large for the receiver.</li><li>Can function or methods, either concurrently or when called from this method, be mutating the receiver? A value type creates a copy of the receiver when the method is invoked, so outside updates will not be applied to this receiver. If changes must be visible in the original receiver, the receiver must be a pointer.</li><li>If the receiver is a struct, array or slice and any of its elements is a pointer to something that might be mutating, prefer a pointer receiver, as it will make the intention more clear to the reader.</li><li>If the receiver is a small array or struct that is naturally a value type (for instance, something like the time.Time type), with no mutable fields and no pointers, or is just a simple basic type such as int or string, a value receiver makes sense.  A value receiver can reduce the amount of garbage that can be generated; if a value is passed to a value method, an on-stack copy can be used instead of allocating on the heap. (The compiler tries to be smart about avoiding this allocation, but it can’t always succeed.) Don’t choose a value receiver type for this reason without profiling first.</li><li>Finally, when in doubt, use a pointer receiver.</li></ul><h2 id="Synchronous-Functions"><a href="#Synchronous-Functions" class="headerlink" title="Synchronous Functions"></a>Synchronous Functions</h2><p>Prefer synchronous functions - functions which return their results directly or finish any callbacks or channel ops before returning - over asynchronous ones.</p><p>Synchronous functions keep goroutines localized within a call, making it easier to reason about their lifetimes and avoid leaks and data races. They’re also easier to test: the caller can pass an input and check the output without the need for polling or synchronization.</p><p>If callers need more concurrency, they can add it easily by calling the function from a separate goroutine. But it is quite difficult - sometimes impossible - to remove unnecessary concurrency at the caller side.</p><h2 id="Useful-Test-Failures"><a href="#Useful-Test-Failures" class="headerlink" title="Useful Test Failures"></a>Useful Test Failures</h2><p>Tests should fail with helpful messages saying what was wrong, with what inputs, what was actually got, and what was expected.  It may be tempting to write a bunch of assertFoo helpers, but be sure your helpers produce useful error messages.  Assume that the person debugging your failing test is not you, and is not your team.  A typical Go test fails like:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> got != tt.want &#123;</span><br><span class="line">t.Errorf(<span class="string">"Foo(%q) = %d; want %d"</span>, tt.in, got, tt.want) <span class="comment">// or Fatalf, if test can't test anything more past this point</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note that the order here is actual != expected, and the message uses that order too. Some test frameworks encourage writing these backwards: 0 != x, “expected 0, got x”, and so on. Go does not.</p><p>If that seems like a lot of typing, you may want to write a [[table-driven test|TableDrivenTests]].</p><p>Another common technique to disambiguate failing tests when using a test helper with different input is to wrap each caller with a different TestFoo function, so the test fails with that name:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestSingleValue</span><span class="params">(t *testing.T)</span></span> &#123; testHelper(t, []<span class="keyword">int</span>&#123;<span class="number">80</span>&#125;) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestNoValues</span><span class="params">(t *testing.T)</span></span>    &#123; testHelper(t, []<span class="keyword">int</span>&#123;&#125;) &#125;</span><br></pre></td></tr></table></figure><p>In any case, the onus is on you to fail with a helpful message to whoever’s debugging your code in the future.</p><h2 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h2><p>Variable names in Go should be short rather than long.  This is especially true for local variables with limited scope.  Prefer <code>c</code> to <code>lineCount</code>.  Prefer <code>i</code> to <code>sliceIndex</code>.</p><p>The basic rule: the further from its declaration that a name is used, the more descriptive the name must be. For a method receiver, one or two letters is sufficient. Common variables such as loop indices and readers can be a single letter (<code>i</code>, <code>r</code>). More unusual things and global variables need more descriptive names.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Go版本发布历史</title>
      <link href="/go_release/"/>
      <url>/go_release/</url>
      
        <content type="html"><![CDATA[<h2 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h2><p>Go语言发布版本号遵循Version.Marjor.Minor的格式。比如Go1.12.5，代表了Version1，Marjor12，Minor5。</p><p>Version代表语言规范的版本。如Go1和即将发布的Go2，他们在语法，数据类型等层面都有所区别。</p><p>Marjor代表主要的版本。编程语言的开发也要分时间分阶段的逐步完善，语言特性及标准库等等被分到不同的Marjor中去实现再发布。</p><p>Minor代表次要的版本。只对重要的功能问题及重要的安全问题进行修复。</p><h2 id="发布周期"><a href="#发布周期" class="headerlink" title="发布周期"></a>发布周期</h2><p>以Go1的历史发布来看，基本保持在6个月出一个新Marjor的节奏。</p><h2 id="支持周期"><a href="#支持周期" class="headerlink" title="支持周期"></a>支持周期</h2><p>每个Marjor版本在其后第二个Marjor版本发布前会获得支持。也就是说Go 1.5会在Go 1.7发布之前获得问题修复，Go 1.6在Go 1.8发布之前获得问题修复。举个例子：Go 1.5在15年8月19日发布，随后Go 1.6在16年2月17日发布，期间Go 1.5发布了多个问题修复的Minor版本:Go 1.5.1、Go 1.5.2、Go 1.5.3、Go 1.5.4。但是随着Go 1.7在16年8月发布，Go 1.5就不再获得支持，也就是说不再会有新Minor版本发布了。</p><h2 id="Go1-12-2019-02-25发布"><a href="#Go1-12-2019-02-25发布" class="headerlink" title="Go1.12 (2019/02/25发布)"></a>Go1.12 (2019/02/25发布)</h2><p>版本更新详细说明可查看<a href="https://go-lang.fun/go_1.12/">Go 1.12发布说明</a></p><h3 id="Go1-12-1-2019-03-14发布"><a href="#Go1-12-1-2019-03-14发布" class="headerlink" title="Go1.12.1 (2019/03/14发布)"></a>Go1.12.1 (2019/03/14发布)</h3><p>包含对cgo, compiler, go命令行的修复, 以及对标准库中fmt, net/smtp, os, path/filepath, sync, text/template包的修复。详情可查看<a href="https://github.com/golang/go/issues?q=milestone%3AGo1.12.1" target="_blank" rel="noopener">Go1.12.1 milestone</a>。</p><h3 id="Go1-12-2-2019-04-05发布"><a href="#Go1-12-2-2019-04-05发布" class="headerlink" title="Go1.12.2 (2019/04/05发布)"></a>Go1.12.2 (2019/04/05发布)</h3><p>包含对compiler, go命令行, runtime的修复, 以及对标准库中doc, net, net/http/httputil,os包的修复。详情可查看<a href="https://github.com/golang/go/issues?q=milestone%3AGo1.12.2" target="_blank" rel="noopener">Go1.12.2 milestone</a>。</p><h3 id="Go1-12-3-2019-04-08发布"><a href="#Go1-12-3-2019-04-08发布" class="headerlink" title="Go1.12.3 (2019/04/08发布)"></a>Go1.12.3 (2019/04/08发布)</h3><p>在并未修复问题的情况下意外发布。与go1.12.2相比, 只有版本号不一样。</p><h3 id="Go1-12-4-2019-04-11发布"><a href="#Go1-12-4-2019-04-11发布" class="headerlink" title="Go1.12.4 (2019/04/11发布)"></a>Go1.12.4 (2019/04/11发布)</h3><p>修复了在旧版本GNU/Linux上使用了预构建的二进制版本，导致当使用cgo时链接程序失败的问题。只有遇到该问题的Linux用户需要升级。</p><h3 id="Go1-12-5-2019-05-06发布"><a href="#Go1-12-5-2019-05-06发布" class="headerlink" title="Go1.12.5 (2019/05/06发布)"></a>Go1.12.5 (2019/05/06发布)</h3><p> 包含对compiler, linker, go命令行, runtime的修复, 以及对标准库中os包的修复。详情可查看<a href="https://github.com/golang/go/issues?q=milestone%3AGo1.12.5" target="_blank" rel="noopener">Go1.12.5 milestone</a>。</p><h3 id="Go1-12-6-2019-06-11发布"><a href="#Go1-12-6-2019-06-11发布" class="headerlink" title="Go1.12.6 (2019/06/11发布)"></a>Go1.12.6 (2019/06/11发布)</h3><p>包含对compiler, linker, go命令行, 以及对标准库中crypto/x509,net/http以及os包的修复。详情可查看<a href="https://github.com/golang/go/issues?q=milestone%3AGo1.12.6" target="_blank" rel="noopener">Go1.12.6 milestone</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Go版本 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
